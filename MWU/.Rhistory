human <- go.sets.hs[go.subs.hs$BP]
strsplit(names(human), " ",fixed=T)
strsplit(names(human), " ",fixed=T)[[1]]
strsplit(names(human), " ",fixed=T)[[1]][[1]]
sapply(names(human), function(x) strsplit(x, " ", fixed=T)[[1]])
sapply(names(human), function(x) strsplit(x, " ", fixed=T)[1])
strsplit(names(human)[1], " ", fixed=T)
unlist(strsplit(names(human)[1], " ", fixed=T))
unlist(strsplit(names(human)[1], " ", fixed=T))[1]
human <- go.sets.hs[go.subs.hs$BP]
names(human) <- sapply(names(human), function(x) unlist(strsplit(x, " ", fixed=T))[1])
human <- go.sets.hs[go.subs.hs$BP]
names(human) <- sapply(names(human), function(x) unlist(strsplit(x, " ", fixed=T))[1])
human <- inverseList(human)
# yeast
data(go.sets.sc)
## prepare other datasets
library(gageData)
# human data
data(go.sets.hs)
data(go.subs.hs)
human <- go.sets.hs[go.subs.hs$BP]
names(human) <- sapply(names(human), function(x) unlist(strsplit(x, " ", fixed=T))[1])
human <- inverseList(human)
# yeast
data(go.sets.sc)
data(go.subs.sc)
yeast <- go.sets.sc[go.subs.sc$BP]
names(yeast) <- sapply(names(yeast), function(x) unlist(strsplit(x, " ", fixed=T))[1])
yeast <- inverseList(yeast)
# rat
data(go.sets.rn)
data(go.subs.rn)
rat <- go.sets.sc[go.subs.rn$BP]
names(rat) <- sapply(names(rat), function(x) unlist(strsplit(x, " ", fixed=T))[1])
rat <- inverseList(rat)
# mouse
data(go.sets.mm)
data(go.subs.mm)
mouse <- go.sets.mm[go.subs.mm$BP]
names(mouse) <- sapply(names(mouse), function(x) unlist(strsplit(x, " ", fixed=T))[1])
mouse <- inverseList(mouse)
hist(sapply(human, length), nclass=50)
par(mfrow=c(2,2))
hist(sapply(human, length), nclass=50)
hist(sapply(yeast, length), nclass=50)
hist(sapply(rat, length), nclass=50)
hist(sapply(mouse, length), nclass=50)
plot(y=rnorm(length(x$log2FC), mean=i*log10(x$n)-intercept, sd=0.9192379), x=x$n)
length(which(x$n > 200))
length(which(x$n > 250))
hist(x$n, nclass=50)
par(mfrow=c(2,2))
hist(x$n, nclass=50)
hist(sapply(human, length), nclass=50)
hist(sapply(yeast, length), nclass=50)
hist(sapply(rat, length), nclass=50)
hist(sapply(mouse, length), nclass=50)
hist(x$n, nclass=50)
hist(sapply(human, length), nclass=50)
hist(sapply(yeast, length), nclass=50)
hist(sapply(rat, length), nclass=50)
length(which(sapply(rat, length)))
length(which(sapply(rat, length))> 200)
length(which(sapply(rat, length)> 200))
length(which(sapply(yeast, length)> 200))
length(which(sapply(human, length)> 200))
length(which(sapply(mouse, length)> 200))
length(which(sapply(mouse, length)==0))
length(which(sapply(human, length)==0))
length(which(sapply(rat, length)==0))
human_data <- data.frame(id=names(human), n=sapply(human, length), stat=rnorm(length(human)))
View(human_data)
rat_data <- data.frame(id=names(rat), n=sapply(rat, length), stat=rnorm(length(rat)))
rat_data$stat <- rnorm(length(rat_data$stat), mean=i*log10(rat_data$n)-intercept, sd=0.9192379)
geneList <- setNames(sample(rat_data$stat), rat_data$id)
GOdat <- new("topGOdata", ontology="BP", allGenes=geneList, annot=annFUN.gene2GO,
gene2GO = annots, geneSel = function(x) x < 0.5 | x > .5, nodeSize = 10)
View(annots)
GOdat <- new("topGOdata", ontology="BP", allGenes=geneList, annot=annFUN.gene2GO,
gene2GO = rat, geneSel = function(x) x < 0.5 | x > .5, nodeSize = 10)
ks_runs_rat_data <- c()
whichAlgorithms()
ks_runs_rat_data <- c()
for(i in c(0, 0.09, 0.18, 0.266)){
B <- 1
intercept <- 1.24221*i
ks_job_linfun <- foreach(1:B, .packages = c("topGO")) %dopar% {
seed <- runif(1, 1, 10000000)
set.seed(seed)
rat_data$stat <- rnorm(length(rat_data$stat), mean=i*log10(rat_data$n)-intercept, sd=0.9192379)
geneList <- setNames(sample(rat_data$stat), rat_data$id)
GOdat <- new("topGOdata", ontology="BP", allGenes=geneList, annot=annFUN.gene2GO,
gene2GO = rat, geneSel = function(x) x < 0.5 | x > .5, nodeSize = 10)
ksrun <- runall(GOdat, algor=whichAlgorithms()[-c(3,6)], test="ks")
results <- resultandseed()
results$result <- ksrun
results$seed <- c(seed, i)
results$seq <- geneList
return(results)
}
ks_runs_rat_data <- c(ks_runs_rat_data, ks_job_linfun)
}
View(ks_runs_rat_data)
tosave <- rat_data[,c(1,3)]
write.table(tosave, file="./MWU/rat.csv", row.names=F, quote=F, sep=",")
tosave <- data.frame("gene"=names(rat), "GO"=sapply(1:length(rat),
function(x) paste0(rat[[x]],collapse = ";")))
View(tosave)
write.table(tosave, file="./MWU/rat_annots.csv", sep="\t", row.names = F, col.names = F, quote=F)
tosave <- human_data[,c(1,3)]
write.table(tosave, file="./MWU/human.csv", row.names=F, quote=F, sep=",")
tosave <- data.frame("gene"=names(human), "GO"=sapply(1:length(human),
function(x) paste0(human[[x]],collapse = ";")))
write.table(tosave, file="./MWU/human_annots.csv", sep="\t", row.names = F, col.names = F, quote=F)
setwd("C:/Users/iXilef/OneDrive/Master/initial/MWU")
library(doParallel)
library(foreach)
cores=detectCores()
cl <- makeCluster(cores[1]-2)
registerDoParallel(cl)
resultandseed <- function(result=NULL,seed=NULL)
{
me <- list(
result = result,
seed = seed,
seq = seq
)
# Set the name for the class
class(me) <- append(class(me),"resultandseed")
return(me)
}
# Edit these to match your data file names:
input="X.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="annotations.BP.go" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
test <- gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
input="rat.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="rat_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
test <- gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
input="human.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="human_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
test <- gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
input="rat.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="rat_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_rat_data <- c()
source("gomwu.functions.R")
input="rat.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="rat_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
test <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25,
iteration=7,
slope=0.7, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
source("gomwu.functions.R")
test <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25,
iteration=7,
slope=0.7, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
test <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25,
iteration=7,
slope=0.2, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
test <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25,
iteration=7,
slope=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
input="X.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="annotations.BP.go" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
input="rat.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="rat_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_rat_data <- c()
for(i in c(0, 0.09, 0.18, 0.266)){
B <- 1
intercept <- 1.24221*i
mwu_job <- foreach(1:B, .export="gomwuStats_cut") %dopar% {
resu <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
iteration=7,
slope=i,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
results <- resultandseed()
results$result <- resu[[1]]
results$seed <- resu[[2]]
results$seq <- resu[[3]]
return(results)
}
mwu_runs_rat_data <- c(mwu_runs_rat_data, mwu_job)
}
View(mwu_runs_rat_data)
seq(0, 0.35,.05)
resultandseed <- function(result=NULL,seed=NULL)
{
me <- list(
result = result,
seed = seed,
seq = seq
)
# Set the name for the class
class(me) <- append(class(me),"resultandseed")
return(me)
}
input="X.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="annotations.BP.go" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_orig_data <- c()
for(i in seq(0, 0.35,.05)){
B <- 100
intercept <- 1.24221*i
mwu_job <- foreach(1:B, .export="gomwuStats_cut") %dopar% {
resu <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
iteration=7,
slope=i,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
results <- resultandseed()
results$result <- resu[[1]]
results$seed <- resu[[2]]
results$seq <- resu[[3]]
return(results)
}
mwu_runs_orig_data <- c(mwu_runs_orig_data, mwu_job)
}
setwd("C:/Users/iXilef/OneDrive/Master/initial/MWU")
library(doParallel)
library(foreach)
cores=detectCores()
cl <- makeCluster(cores[1]-2)
registerDoParallel(cl)
# Edit these to match your data file names:
input="X.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="annotations.BP.go" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# run every dataset once to build tree
# test <- gomwuStats(input, goDatabase, goAnnotations, goDivision,
#                        perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
#                        largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
#                        smallest=10,   # a GO category should contain at least this many genes to be considered
#                        clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#                        #	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#                        #	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#                        #	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
# )
#
# input="rat.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
# goAnnotations="rat_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
# goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
# goDivision="BP" # either MF, or BP, or CC
# source("gomwu.functions.R")
#
# # run every dataset once to build tree
#
# test <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
#                    perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
#                    largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
#                    smallest=10,   # a GO category should contain at least this many genes to be considered
#                    clusterCutHeight=0.25,
#                    iteration=7,
#                    slope=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#                    #	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#                    #	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#                    #	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
# )
#
# input="human.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
# goAnnotations="human_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
# goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
# goDivision="BP" # either MF, or BP, or CC
# source("gomwu.functions.R")
#
# # run every dataset once to build tree
#
# test <- gomwuStats(input, goDatabase, goAnnotations, goDivision,
#                    perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
#                    largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
#                    smallest=10,   # a GO category should contain at least this many genes to be considered
#                    clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
#                    #	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#                    #	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#                    #	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
# )
resultandseed <- function(result=NULL,seed=NULL)
{
me <- list(
result = result,
seed = seed,
seq = seq
)
# Set the name for the class
class(me) <- append(class(me),"resultandseed")
return(me)
}
input="X.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="annotations.BP.go" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_orig_data <- c()
for(i in seq(0, 0.35,.05)){
B <- 100
intercept <- 1.24221*i
mwu_job <- foreach(1:B, .export="gomwuStats_cut") %dopar% {
resu <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
iteration=7,
slope=i,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
results <- resultandseed()
results$result <- resu[[1]]
results$seed <- resu[[2]]
results$seq <- resu[[3]]
return(results)
}
mwu_runs_orig_data <- c(mwu_runs_orig_data, mwu_job)
}
resultandseed <- function(result=NULL,seed=NULL)
{
me <- list(
result = result,
seed = seed,
seq = seq
)
# Set the name for the class
class(me) <- append(class(me),"resultandseed")
return(me)
}
input="X.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="annotations.BP.go" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_orig_data <- c()
for(i in seq(0, 0.35,.05)){
B <- 100
intercept <- 1.24221*i
mwu_job <- foreach(1:B, .export="gomwuStats_cut") %dopar% {
resu <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
iteration=7,
slope=i,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
results <- resultandseed()
results$result <- resu[[1]]
results$seed <- resu[[2]]
results$seq <- resu[[3]]
return(results)
}
mwu_runs_orig_data <- c(mwu_runs_orig_data, mwu_job)
}
input="rat.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="rat_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_rat_data <- c()
for(i in seq(0, 0.35,.05)){
B <- 100
intercept <- 1.24221*i
mwu_job <- foreach(1:B, .export="gomwuStats_cut") %dopar% {
resu <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
iteration=7,
slope=i,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
results <- resultandseed()
results$result <- resu[[1]]
results$seed <- resu[[2]]
results$seq <- resu[[3]]
return(results)
}
mwu_runs_rat_data <- c(mwu_runs_rat_data, mwu_job)
}
View(mwu_runs_rat_data)
mwu_runs_rat_data[[1]][["seed"]]
mwu_runs_rat_data[[101]][["seed"]]
input="human.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="human_annots.csv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
mwu_runs_human_data <- c()
for(i in seq(0, 0.35,.05)){
B <- 100
intercept <- 1.24221*i
mwu_job <- foreach(1:B, .export="gomwuStats_cut") %dopar% {
resu <- gomwuStats_cut(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.,
iteration=7,
slope=i,
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
results <- resultandseed()
results$result <- resu[[1]]
results$seed <- resu[[2]]
results$seq <- resu[[3]]
return(results)
}
mwu_runs_human_data <- c(mwu_runs_human_data, mwu_job)
}
save(mwu_runs_orig_data, mwu_runs_human_data, mwu_runs_rat_data, file="./data/MWU_runs_final.RData")
save(mwu_runs_orig_data, mwu_runs_human_data, mwu_runs_rat_data, file="../data/MWU_runs_final.RData")
View(mwu_runs_human_data)
